snippet fori
	for (${1:i} = 0; $1 < ${2:n}; $1 = $1 + 1) {
		${3:pass}
	}
# prototype function
snippet pf
	${1:Object}.prototype.${2:func} = function (${3:args}) {
		${4:pass}
	};
# exports
snippet exp
	exports.${1:Module} = $1;
# log error
snippet err
	console.error(error);
# require
snippet rq
	require('${1}');
snippet rqs
	var ${1:Module} = require('$1');
# fenbi tmpl
snippet fenbi
	/**
	 * `expand("%:t")`, `strftime("%b %-d, %Y")`
	 *
	 * Copyright `strftime("%Y")` fenbi.com. All rights reserved.
	 * FENBI.COM PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
	 */

	/**
	 * @author `g:snips_author` <`g:snips_email`>
	 */

	/*jslint browser: true, vars: true, nomen: true, indent: 4, plusplus: true, sloppy: true*/
	/*global define: true */

	define(function (require, exports) {
		'use strict';

		${1}
	});

	/* vim: set et sw=4 ts=4 sts=4: */
# tmpl for seajs
snippet seajs
	/*jslint browser: true, devel: true, indent: 4, nomen:true, vars: true */
	/*global define */

	define(function (require, exports, module) {
		"use strict";

		${1}
	});

# tmpl for browser js
snippet browser
	/*jslint browser: true, devel: true, indent: 4, nomen:true, vars: true */
	/*global define */

	(function () {
	    "use strict";

		${1}
	}());
# tmpl for nodejs
snippet node
	/*jslint node: true, indent: 4, nomen:true, vars: true */
	/*global require */

	(function () {
	    "use strict";

		${1}
	}());
# log
snippet l
	console.log('${1:var} = ' + $1);
# Prototype
snippet proto
	${1:class_name}.prototype.${2:method_name} =
	function(${3:first_argument}) {
		${4:// body...}
	};
# Function
snippet fun
	function ${1:function_name} (${2:argument}) {
		${3:// body...}
	}
# Anonymous Function
snippet f
	function(${1}) {${2}};
# if
snippet if
	if (${1:true}) {${2}}
# if ... else
snippet ife
	if (${1:true}) {${2}}
	else{${3}}
# tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
	switch(${1:expression}) {
		case '${3:case}':
			${4:// code}
			break;
		${5}
		default:
			${2:// code}
	}
# case
snippet case
	case '${1:case}':
		${2:// code}
		break;
	${3}
# for (...) {...}
snippet for
	for (var ${2:i} = 0; $2 < ${1:Things}.length; $2${3:++}) {
		${4:$1[$2]}
	};
# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2${3:--}) {
		${4:$1[$2]}
	};
# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# do...while
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
# Object Method
snippet :f
	${1:method_name}: function(${2:attribute}) {
		${4}
	}${3:,}
# setTimeout function
snippet timeout
	setTimeout(function() {${3}}${2}, ${1:10};
# Get Elements
snippet get
	getElementsBy${1:TagName}('${2}')${3}
# Get Element
snippet gett
	getElementBy${1:Id}('${2}')${3}
